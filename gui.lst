C51 COMPILER V9.60.0.0   GUI                                                               06/12/2022 21:53:21 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GUI
OBJECT MODULE PLACED IN gui.obj
COMPILER INVOKED BY: F:\keil\C51\BIN\C51.EXE GUI\gui.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\模块.\User;.\Public;
                    -.\GUI;.\APP\tftlcd;.\APP\touch;.\模块) DEBUG PRINT(.\gui.lst) TABS(2) OBJECT(gui.obj)

line level    source

   1          #if 1
   2          
   3          #include "gui.h"
   4          
   5          
   6          extern code const unsigned char ascii_1206[95][12];
   7          extern code const unsigned char ascii_1608[95][16];
   8          extern code const unsigned char ascii_2412[95][36];
   9          
  10             
  11          
  12          //颜色转换
  13          //rgb:32位颜色
  14          //返回值:16位色.
  15          u16 gui_color_chg(u32 rgb)
  16          {
  17   1        u16 r,g,b;
  18   1        r=rgb>>19;
  19   1        g=(rgb>>10)&0x3f;
  20   1        b=(rgb>>3)&0x1f;
  21   1        return ((r<<11)|(g<<5)|b);   
  22   1      }
  23          //将rgb332颜色转换为rgb565.
  24          //rgb332:rgb332格式数据
  25          //返回值:rgb565格式数据.
  26          u16 gui_rgb332torgb565(u16 rgb332)
  27          {
  28   1        u16 rgb565=0x18E7;
  29   1        rgb565|=(rgb332&0x03)<<3;
  30   1        rgb565|=(rgb332&0x1c)<<6;
  31   1        rgb565|=(rgb332&0xe0)<<8;
  32   1        return rgb565;
  33   1      }
  34          //m^n函数
  35          long gui_pow(u8 m,u8 n)
  36          {
  37   1        long result=1;   
  38   1        while(n--)result*=m;    
  39   1        return result;
  40   1      }
  41          //两个数的差的绝对值
  42          u32 gui_disabs(u32 x1,u32 x2)
  43          {
  44   1        return x1>x2 ? x1-x2:x2-x1;     
  45   1      }   
  46          
  47          //////////////////////////统一标准函数//////////////////////////////
  48          //画点函数
  49          //x0,y0:坐标
  50          //color:颜色
  51          void gui_draw_point(u16 x0,u16 y0,u16 color)
  52          {
  53   1        u16 tempcolor=FRONT_COLOR;
  54   1        FRONT_COLOR=color;
C51 COMPILER V9.60.0.0   GUI                                                               06/12/2022 21:53:21 PAGE 2   

  55   1        LCD_DrawPoint(x0,y0);
  56   1        FRONT_COLOR=tempcolor;
  57   1      }
  58          
  59          //对指定区域进行alphablend
  60          //x,y,width,height:区域设置
  61          //color:alphablend的颜色
  62          //aval:透明度(0~32)
  63          void gui_alphablend_area(u16 x,u16 y,u16 width,u16 height,u16 color,u8 aval)
  64          {
  65   1        u16 i,j;
  66   1        u16 tempcolor;
  67   1        for(i=0;i<width;i++)
  68   1        {
  69   2          for(j=0;j<height;j++)
  70   2          {
  71   3            tempcolor=LCD_ReadPoint(x+i,y+j);
  72   3            tempcolor=gui_alpha_blend565(tempcolor,color,aval);
  73   3            LCD_DrawFRONT_COLOR(x+i,y+j,tempcolor);
  74   3          }
  75   2        }
  76   1      }
  77          
  78          //画大点函数
  79          //x0,y0:坐标
  80          //color:颜色
  81          //以(x0,y0)为中心,画一个9个点的大点
  82          void gui_draw_bigpoint(u16 x0,u16 y0,u16 color)
  83          {
  84   1        u16 i,j;
  85   1        u16 x,y;            
  86   1        if(x0>=1)x=x0-1;
  87   1        else x=x0;
  88   1        if(y0>=1)y=y0-1;
  89   1        else y=y0;
  90   1        for(i=y;i<y0+2;i++)
  91   1        {
  92   2          for(j=x;j<x0+2;j++)LCD_DrawFRONT_COLOR(j,i,color);
  93   2        }                
  94   1      }
  95          //画任意线
  96          //x0,y0:起点 x1,y1:终点
  97          //color:颜色
  98          void gui_draw_line(u16 x0,u16 y0,u16 x1,u16 y1,u16 color)
  99          {
 100   1        u16 t; 
 101   1        int xerr=0,yerr=0,delta_x,delta_y,distance; 
 102   1        int incx,incy,uRow,uCol; 
 103   1      
 104   1        delta_x=x1-x0; //计算坐标增量 
 105   1        delta_y=y1-y0; 
 106   1        uRow=x0; 
 107   1        uCol=y0; 
 108   1        if(delta_x>0)incx=1; //设置单步方向 
 109   1        else if(delta_x==0)incx=0;//垂直线 
 110   1        else {incx=-1;delta_x=-delta_x;} 
 111   1        if(delta_y>0)incy=1; 
 112   1        else if(delta_y==0)incy=0;//水平线 
 113   1        else{incy=-1;delta_y=-delta_y;} 
 114   1        if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
 115   1        else distance=delta_y; 
 116   1        for(t=0;t<=distance+1;t++ )//画线输出 
C51 COMPILER V9.60.0.0   GUI                                                               06/12/2022 21:53:21 PAGE 3   

 117   1        {  
 118   2          LCD_DrawFRONT_COLOR(uRow,uCol,color);//画点 
 119   2          xerr+=delta_x ; 
 120   2          yerr+=delta_y ; 
 121   2          if(xerr>distance) 
 122   2          { 
 123   3            xerr-=distance; 
 124   3            uRow+=incx; 
 125   3          } 
 126   2          if(yerr>distance) 
 127   2          { 
 128   3            yerr-=distance; 
 129   3            uCol+=incy; 
 130   3          } 
 131   2        }          
 132   1      }
 133          //画一条粗线(方法0)
 134          //(x1,y1),(x2,y2):线条的起止坐标
 135          //size：线条的粗细程度
 136          //color：线条的颜色
 137          void gui_draw_bline(u16 x1, u16 y1, u16 x2, u16 y2,u8 size,u16 color)
 138          {
 139   1        u16 t; 
 140   1        int xerr=0,yerr=0,delta_x,delta_y,distance; 
 141   1        int incx,incy,uRow,uCol; 
 142   1        if(x1<size|| x2<size||y1<size|| y2<size)return;
 143   1        if(size==0){LCD_DrawFRONT_COLOR(x1,y1,color);return;} 
 144   1        delta_x=x2-x1; //计算坐标增量 
 145   1        delta_y=y2-y1; 
 146   1        uRow=x1; 
 147   1        uCol=y1; 
 148   1        if(delta_x>0)incx=1; //设置单步方向 
 149   1        else if(delta_x==0)incx=0;//垂直线 
 150   1        else {incx=-1;delta_x=-delta_x;} 
 151   1        if(delta_y>0)incy=1; 
 152   1        else if(delta_y==0)incy=0;//水平线 
 153   1        else{incy=-1;delta_y=-delta_y;} 
 154   1        if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
 155   1        else distance=delta_y; 
 156   1        for(t=0;t<=distance+1;t++ )//画线输出 
 157   1        {  
 158   2          gui_fill_circle(uRow,uCol,size,color);//画点 
 159   2          xerr+=delta_x ; 
 160   2          yerr+=delta_y ; 
 161   2          if(xerr>distance){xerr-=distance;uRow+=incx;}  
 162   2          if(yerr>distance){yerr-=distance;uCol+=incy;}
 163   2        }  
 164   1      } 
 165          
 166          //画一条粗线(方法1)
 167          //x0,y0:起点 x1,y1:终点
 168          //size:线粗细,仅支持:0~2.
 169          //color:颜色
 170          void gui_draw_bline1(u16 x0,u16 y0,u16 x1,u16 y1,u8 size,u16 color)
 171          {
 172   1        u16 t; 
 173   1        int xerr=0,yerr=0,delta_x,delta_y,distance; 
 174   1        int incx,incy,uRow,uCol; 
 175   1      
 176   1        delta_x=x1-x0; //计算坐标增量 
 177   1        delta_y=y1-y0; 
 178   1        uRow=x0; 
C51 COMPILER V9.60.0.0   GUI                                                               06/12/2022 21:53:21 PAGE 4   

 179   1        uCol=y0; 
 180   1        if(delta_x>0)incx=1; //设置单步方向 
 181   1        else if(delta_x==0)incx=0;//垂直线 
 182   1        else {incx=-1;delta_x=-delta_x;} 
 183   1        if(delta_y>0)incy=1; 
 184   1        else if(delta_y==0)incy=0;//水平线 
 185   1        else{incy=-1;delta_y=-delta_y;} 
 186   1        if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
 187   1        else distance=delta_y; 
 188   1        for(t=0;t<=distance+1;t++ )//画线输出 
 189   1        {  
 190   2          if(size==0)LCD_DrawFRONT_COLOR(uRow,uCol,color);//画点 
 191   2          if(size==1)
 192   2          {
 193   3            LCD_DrawFRONT_COLOR(uRow,uCol,color);//画点 
 194   3            LCD_DrawFRONT_COLOR(uRow+1,uCol,color);//画点 
 195   3            LCD_DrawFRONT_COLOR(uRow,uCol+1,color);//画点 
 196   3            LCD_DrawFRONT_COLOR(uRow+1,uCol+1,color);//画点 
 197   3          }
 198   2          if(size==2)
 199   2          {
 200   3            LCD_DrawFRONT_COLOR(uRow,uCol,color);//画点 
 201   3            LCD_DrawFRONT_COLOR(uRow+1,uCol,color);//画点 
 202   3            LCD_DrawFRONT_COLOR(uRow,uCol+1,color);//画点 
 203   3            LCD_DrawFRONT_COLOR(uRow+1,uCol+1,color);//画点 
 204   3            LCD_DrawFRONT_COLOR(uRow-1,uCol+1,color);//画点 
 205   3            LCD_DrawFRONT_COLOR(uRow+1,uCol-1,color);//画点
 206   3            LCD_DrawFRONT_COLOR(uRow-1,uCol-1,color);//画点  
 207   3            LCD_DrawFRONT_COLOR(uRow-1,uCol,color);//画点 
 208   3            LCD_DrawFRONT_COLOR(uRow,uCol-1,color);//画点  
 209   3          }
 210   2          xerr+=delta_x ; 
 211   2          yerr+=delta_y ; 
 212   2          if(xerr>distance) 
 213   2          { 
 214   3            xerr-=distance; 
 215   3            uRow+=incx; 
 216   3          } 
 217   2          if(yerr>distance) 
 218   2          { 
 219   3            yerr-=distance; 
 220   3            uCol+=incy; 
 221   3          } 
 222   2        }          
 223   1      }
 224          //画垂直线
 225          //x0,y0:坐标
 226          //len:线长度
 227          //color:颜色
 228          void gui_draw_vline(u16 x0,u16 y0,u16 len,u16 color)
 229          {
 230   1        if((len==0)||(x0>tftlcd_data.width)||(y0>tftlcd_data.height))return;
 231   1        LCD_Fill(x0,y0,x0,y0+len-1,color);  
 232   1      }
 233          //画水平线
 234          //x0,y0:坐标
 235          //len:线长度
 236          //color:颜色
 237          void gui_draw_hline(u16 x0,u16 y0,u16 len,u16 color)
 238          {
 239   1        if((len==0)||(x0>tftlcd_data.width)||(y0>tftlcd_data.height))return;
 240   1        LCD_Fill(x0,y0,x0+len-1,y0,color);  
C51 COMPILER V9.60.0.0   GUI                                                               06/12/2022 21:53:21 PAGE 5   

 241   1      }
 242          //填充一个色块.
 243          //x0,y0,width,height:坐标及填充尺寸
 244          //ctbl:颜色表,横向填充时width,纵向填充时大小为height
 245          //mode:填充模式(纵向:从左到右,从上到下填充;横向:从上到下,从左到右填充)
 246          //[7:1]:保留
 247          //[bit0]:0,纵向;1,横向
 248          void gui_fill_colorblock(u16 x0,u16 y0,u16 width,u16 height,u16* ctbl,u8 mode)
 249          {
 250   1        u16 i;
 251   1        if(height==0||width==0)return;
 252   1        if(mode&0x01)//横向
 253   1        {
 254   2          for(i=0;i<width;i++)
 255   2          {
 256   3            gui_draw_vline(x0+i,y0,height-1,ctbl[i]); 
 257   3          }
 258   2        }else
 259   1        {
 260   2          for(i=0;i<height;i++)
 261   2          {
 262   3            gui_draw_hline(x0,y0+i,width-1,ctbl[i]);  
 263   3          }
 264   2        }
 265   1      }   
 266          
 267          //将一种颜色平滑过渡到另外一种颜色
 268          //srgb,ergb:起始颜色和终止颜色.
 269          //cbuf:颜色缓存区(≥len)
 270          //len:过渡级数(就是输出的颜色值总数)
 271          void gui_smooth_color(u32 srgb,u32 ergb,u16*cbuf,u16 len)
 272          {
 273   1        u8 sr,sg,sb;
 274   1        short dr,dg,db;
 275   1        u16 r,g,b;    
 276   1        u16 i=0;
 277   1        sr=srgb>>16;
 278   1        sg=(srgb>>8)&0XFF;
 279   1        sb=srgb&0XFF;
 280   1        dr=(ergb>>16)-sr;
 281   1        dg=((ergb>>8)&0XFF)-sg;
 282   1        db=(ergb&0XFF)-sb;
 283   1        for(i=0;i<len;i++)
 284   1        {
 285   2          r=sr+(dr*i)/len;
 286   2          g=sg+(dg*i)/len;
 287   2          b=sb+(db*i)/len;
 288   2          r>>=3;
 289   2          g>>=2;
 290   2          b>>=3;
 291   2            cbuf[i]=((r<<11)|(g<<5)|b);      
 292   2        }
 293   1      }
 294          
 295          //画一条平滑过渡的彩色矩形(或线)
 296          //x,y,width,height:矩形的坐标尺寸
 297          //srgb,ergb:起始和终止的颜色
 298          void gui_draw_smooth_rectangle(u16 x,u16 y,u16 width,u16 height,u32 srgb,u32 ergb)
 299          {
 300   1        u16 i,j;
 301   1        u16 *colortbl;
 302   1      
C51 COMPILER V9.60.0.0   GUI                                                               06/12/2022 21:53:21 PAGE 6   

 303   1        gui_smooth_color(srgb,ergb,colortbl,width);//获得颜色组
 304   1        for(i=0;i<width;i++)
 305   1        {  
 306   2          for(j=0;j<height;j++)
 307   2          {
 308   3            LCD_DrawFRONT_COLOR(x+i,y+j,colortbl[i]);//画点
 309   3          }
 310   2        }
 311   1      }
 312          
 313          //画矩形
 314          //x0,y0:矩形的左上角坐标
 315          //width,height:矩形的尺寸
 316          //color:颜色
 317          void gui_draw_rectangle(u16 x0,u16 y0,u16 width,u16 height,u16 color)
 318          {
 319   1        gui_draw_hline(x0,y0,width,color);
 320   1        gui_draw_hline(x0,y0+height-1,width,color);
 321   1        gui_draw_vline(x0,y0,height,color);
 322   1        gui_draw_vline(x0+width-1,y0,height,color);
 323   1      }
 324          //画圆角矩形/填充圆角矩形
 325          //x,y,width,height:圆角矩形的位置和尺寸
 326          //r:圆角的半径.
 327          //mode:0,画矩形框;1,填充矩形.
 328          //upcolor:上半部分颜色
 329          //downcolor:下半部分颜色
 330          void gui_draw_arcrectangle(u16 x,u16 y,u16 width,u16 height,u8 r,u8 mode,u16 upcolor,u16 downcolor)
 331          {
 332   1        u16 btnxh=0;
 333   1        if(height%2)btnxh=height+1;//基偶数处理
 334   1        else btnxh=height;
 335   1        if(mode)//填充
 336   1        {
 337   2          gui_fill_rectangle(x+r,y,width-2*r,btnxh/2,upcolor);      //中上
 338   2            gui_fill_rectangle(x+r,y+btnxh/2,width-2*r,btnxh/2,downcolor);  //中下
 339   2          gui_fill_rectangle(x,y+r,r,btnxh/2-r,upcolor);          //左上
 340   2          gui_fill_rectangle(x,y+btnxh/2,r,btnxh/2-r,downcolor);      //左下
 341   2          gui_fill_rectangle(x+width-r,y+r,r,btnxh/2-r,upcolor);      //右上
 342   2          gui_fill_rectangle(x+width-r,y+btnxh/2,r,btnxh/2-r,downcolor);  //右下
 343   2        }else
 344   1        {
 345   2          gui_draw_hline (x+r,y,width-2*r,upcolor);         //上       
 346   2          gui_draw_hline (x+r,y+btnxh-1,width-2*r,downcolor);     //下       
 347   2          gui_draw_vline (x,y+r,btnxh/2-r,upcolor);         //左上       
 348   2          gui_draw_vline (x,y+btnxh/2,btnxh/2-r,downcolor);     //左下       
 349   2          gui_draw_vline (x+width-1,y+r,btnxh/2-r,upcolor);     //右上
 350   2          gui_draw_vline (x+width-1,y+btnxh/2,btnxh/2-r,downcolor); //右下           
 351   2        }
 352   1        gui_draw_arc(x,y,x+r,y+r,x+r,y+r,r,upcolor,mode);//左上 
 353   1        gui_draw_arc(x,y+btnxh-r,x+r,y+btnxh-1,x+r,y+btnxh-r-1,r,downcolor,mode);//左下 
 354   1        gui_draw_arc(x+width-r,y,x+width,y+r,x+width-r-1,y+r,r,upcolor,mode);  //右上
 355   1        gui_draw_arc(x+width-r,y+btnxh-r,x+width,y+btnxh-1,x+width-r-1,y+btnxh-r-1,r,downcolor,mode);//右下
 356   1      }
 357          
 358          //填充矩形
 359          //x0,y0:矩形的左上角坐标
 360          //width,height:矩形的尺寸
 361          //color:颜色
 362          void gui_fill_rectangle(u16 x0,u16 y0,u16 width,u16 height,u16 color)
 363          {                    
 364   1        if(width==0||height==0)return;//非法.  
C51 COMPILER V9.60.0.0   GUI                                                               06/12/2022 21:53:21 PAGE 7   

 365   1        LCD_Fill(x0,y0,x0+width-1,y0+height-1,color);        
 366   1      }
 367          //画实心圆
 368          //x0,y0:坐标
 369          //r半径
 370          //color:颜色
 371          void gui_fill_circle(u16 x0,u16 y0,u16 r,u16 color)
 372          {                       
 373   1        u32 i;
 374   1        u32 imax = ((u32)r*707)/1000+1;
 375   1        u32 sqmax = (u32)r*(u32)r+(u32)r/2;
 376   1        u32 x=r;
 377   1        gui_draw_hline(x0-r,y0,2*r,color);
 378   1        for (i=1;i<=imax;i++) 
 379   1        {
 380   2          if ((i*i+x*x)>sqmax) 
 381   2          {
 382   3            // draw lines from outside  
 383   3            if (x>imax) 
 384   3            {
 385   4              gui_draw_hline (x0-i+1,y0+x,2*(i-1),color);
 386   4              gui_draw_hline (x0-i+1,y0-x,2*(i-1),color);
 387   4            }
 388   3            x--;
 389   3          }
 390   2          // draw lines from inside (center)  
 391   2          gui_draw_hline(x0-x,y0+i,2*x,color);
 392   2          gui_draw_hline(x0-x,y0-i,2*x,color);
 393   2        }
 394   1      }
 395          //在区域内画点
 396          //(sx,sy),(ex,ey):设定的显示范围
 397          //(x,y):点坐标
 398          //color:颜色
 399          void gui_draw_expoint(u16 sx,u16 sy,u16 ex,u16 ey,u16 x,u16 y,u16 color)      
 400          {
 401   1        u16 tempcolor;
 402   1        if(x<=ex&&x>=sx&&y<=ey&&y>=sy)
 403   1        {
 404   2          tempcolor=FRONT_COLOR;
 405   2          FRONT_COLOR=color;
 406   2          LCD_DrawPoint(x,y);     
 407   2          FRONT_COLOR=tempcolor;
 408   2        }
 409   1      }
 410          //画8点(Bresenham算法)      
 411          //(sx,sy),(ex,ey):设定的显示范围
 412          //(rx,ry,a,b):参数
 413          //color:颜色
 414          void gui_draw_circle8(u16 sx,u16 sy,u16 ex,u16 ey,u16 rx,u16 ry,int a,int b,u16 color)
 415          {
 416   1        gui_draw_expoint(sx,sy,ex,ey,rx+a,ry-b,color);              
 417   1        gui_draw_expoint(sx,sy,ex,ey,rx+b,ry-a,color);                       
 418   1        gui_draw_expoint(sx,sy,ex,ey,rx+b,ry+a,color);                           
 419   1        gui_draw_expoint(sx,sy,ex,ey,rx+a,ry+b,color);             
 420   1        gui_draw_expoint(sx,sy,ex,ey,rx-a,ry+b,color);                  
 421   1        gui_draw_expoint(sx,sy,ex,ey,rx-b,ry+a,color);               
 422   1        gui_draw_expoint(sx,sy,ex,ey,rx-b,ry-a,color);                      
 423   1        gui_draw_expoint(sx,sy,ex,ey,rx-a,ry-b,color);                  
 424   1      }     
 425          //在指定位置画一个指定大小的圆
 426          //(rx,ry):圆心
C51 COMPILER V9.60.0.0   GUI                                                               06/12/2022 21:53:21 PAGE 8   

 427          //(sx,sy),(ex,ey):设定的显示范围
 428          //r    :半径
 429          //color:颜色
 430          //mode :0,不填充;1,填充
 431          void gui_draw_arc(u16 sx,u16 sy,u16 ex,u16 ey,u16 rx,u16 ry,u16 r,u16 color,u8 mode)
 432          {
 433   1        int a,b,c;
 434   1        int di;   
 435   1        a=0;b=r;    
 436   1        di=3-(r<<1);  //判断下个点位置的标志
 437   1        while(a<=b)
 438   1        {
 439   2          if(mode)for(c=a;c<=b;c++)gui_draw_circle8(sx,sy,ex,ey,rx,ry,a,c,color);//画实心圆
 440   2          else gui_draw_circle8(sx,sy,ex,ey,rx,ry,a,b,color);            //画空心圆
 441   2          a++;
 442   2          //使用Bresenham算法画圆     
 443   2          if(di<0)di +=4*a+6;   
 444   2          else
 445   2          {
 446   3            di+=10+4*(a-b);   
 447   3            b--;
 448   3          }                 
 449   2        }
 450   1      }
 451          //画椭圆
 452          //x0,y0:坐标
 453          //rx:x方向半径
 454          //ry:y方向半径
 455          //color:椭圆的颜色
 456          void gui_draw_ellipse(u16 x0, u16 y0, u16 rx, u16 ry,u16 color) 
 457          {
 458   1        u32 OutConst, Sum, SumY;
 459   1        u16 x,y;
 460   1        u16 xOld;
 461   1        u32 _rx = rx;
 462   1        u32 _ry = ry;
 463   1        if(rx>x0||ry>y0)return;//非法.
 464   1        OutConst = _rx*_rx*_ry*_ry+(_rx*_rx*_ry>>1);  // Constant as explaint above 
 465   1        // To compensate for rounding  
 466   1        xOld = x = rx;
 467   1        for (y=0; y<=ry; y++) 
 468   1        {
 469   2          if (y==ry)x=0; 
 470   2          else 
 471   2          {
 472   3            SumY =((u32)(rx*rx))*((u32)(y*y)); // Does not change in loop  
 473   3            while(Sum = SumY + ((u32)(ry*ry))*((u32)(x*x)),(x>0) && (Sum>OutConst)) x--;
 474   3          }
 475   2          // Since we draw lines, we can not draw on the first iteration        
 476   2          if (y) 
 477   2          {
 478   3            gui_draw_line(x0-xOld,y0-y+1,x0-x,y0-y,color);
 479   3            gui_draw_line(x0-xOld,y0+y-1,x0-x,y0+y,color);
 480   3            gui_draw_line(x0+xOld,y0-y+1,x0+x,y0-y,color);
 481   3            gui_draw_line(x0+xOld,y0+y-1,x0+x,y0+y,color);
 482   3          }
 483   2          xOld = x;
 484   2        }
 485   1      }
 486          //填充椭圆
 487          //x0,y0:坐标
 488          //rx:x方向半径
C51 COMPILER V9.60.0.0   GUI                                                               06/12/2022 21:53:21 PAGE 9   

 489          //ry:y方向半径
 490          //color:椭圆的颜色
 491          void gui_fill_ellipse(u16 x0,u16 y0,u16 rx,u16 ry,u16 color) 
 492          {
 493   1        u32 OutConst, Sum, SumY;
 494   1        u16 x,y;
 495   1        u32 _rx = rx;
 496   1        u32 _ry = ry;
 497   1        OutConst = _rx*_rx*_ry*_ry+(_rx*_rx*_ry>>1);  // Constant as explaint above  
 498   1        // To compensate for rounding 
 499   1        x = rx;
 500   1        for (y=0; y<=ry; y++) 
 501   1        {
 502   2          SumY =((u32)(rx*rx))*((u32)(y*y)); // Does not change in loop  
 503   2          while (Sum = SumY + ((u32)(ry*ry))*((u32)(x*x)),(x>0) && (Sum>OutConst))x--;    
 504   2          gui_draw_hline(x0-x,y0+y,2*x,color);
 505   2          if(y)gui_draw_hline(x0-x,y0-y,2*x,color);    
 506   2        }
 507   1      }
 508          //快速ALPHA BLENDING算法.
 509          //src:源颜色
 510          //dst:目标颜色
 511          //alpha:透明程度(0~32)
 512          //返回值:混合后的颜色.
 513          u16 gui_alpha_blend565(u16 src,u16 dst,u8 alpha)
 514          {
 515   1        u32 src2;
 516   1        u32 dst2;  
 517   1        //Convert to 32bit |-----GGGGGG-----RRRRR------BBBBB|
 518   1        src2=((src<<16)|src)&0x07E0F81F;
 519   1        dst2=((dst<<16)|dst)&0x07E0F81F;   
 520   1        //Perform blending R:G:B with alpha in range 0..32
 521   1        //Note that the reason that alpha may not exceed 32 is that there are only
 522   1        //5bits of space between each R:G:B value, any higher value will overflow
 523   1        //into the next component and deliver ugly result.
 524   1        dst2=((((dst2-src2)*alpha)>>5)+src2)&0x07E0F81F;
 525   1        return (dst2>>16)|dst2;  
 526   1      }  
 527          
 528          //在中间位置显示一个字符串
 529          //x,y,width,height:显示区域坐标.
 530          //color:文字颜色.
 531          //size:文字大小
 532          //str:字符串
 533          void gui_show_strmid(u16 x,u16 y,u16 width,u16 height,u16 color,u8 size,u8 *str)
 534          {
 535   1        u16 xoff=0,yoff=0;
 536   1        u16 strlenth;
 537   1        u16 strwidth;
 538   1        if(str=='\0')return;
 539   1          strlenth=strlen((const char*)str);  //得到字符串长度
 540   1        strwidth=strlenth*size/2;   //字符串显示占用宽度
 541   1        if(height>size)yoff=(height-size)/2;
 542   1        if(strwidth<=width)//字符串没超过宽度
 543   1        {
 544   2          xoff=(width-strwidth)/2;    
 545   2        }
 546   1        gui_show_ptstr(x+xoff,y+yoff,x+width-1,y+height-1,0,color,size,str,1);  
 547   1      }
 548          
 549          //在中间位置显示一个字符串
 550          //x,y,width,height:显示区域坐标.
C51 COMPILER V9.60.0.0   GUI                                                               06/12/2022 21:53:21 PAGE 10  

 551          //color:文字颜色.
 552          //size:文字大小
 553          //str:字符串
 554          //mode:0,非叠加显示;1,叠加显示,2,大点叠加(只适用于叠加模式)
 555          void gui_show_strmidex(u16 x,u16 y,u16 width,u16 height,u16 color,u8 size,u8 *str,u8 mode)
 556          {
 557   1        u16 xoff=0,yoff=0;
 558   1        u16 strlenth;
 559   1        u16 strwidth;
 560   1        if(str=='\0')return;
 561   1          strlenth=strlen((const char*)str);  //得到字符串长度
 562   1        strwidth=strlenth*size/2;   //字符串显示占用宽度
 563   1        if(height>size)yoff=(height-size)/2;
 564   1        if(strwidth<=width)//字符串没超过宽度
 565   1        {
 566   2          xoff=(width-strwidth)/2;    
 567   2        }
 568   1        gui_show_ptstr(x+xoff,y+yoff,x+width-1,y+height-1,0,color,size,str,mode);  
 569   1      }
 570          
 571          //在指定地址开始显示一个ASCII字符
 572          //x,y:显示开始坐标.
 573          //xend,yend:x,y 方向的终点坐标
 574          //offset:开始显示的偏移
 575          //color:文字颜色.
 576          //size:文字大小
 577          //chr:字符
 578          //mode:0,非叠加显示;1,叠加显示.2,大点叠加(只适用于叠加模式)
 579          void gui_show_ptchar(u16 x,u16 y,u16 xend,u16 yend,u16 offset,u16 color,u16 size,u8 chr,u8 mode)
 580          {
 581   1          u8 temp;
 582   1          u8 t1,t;
 583   1        u16 tempoff;
 584   1        u16 y0=y;   
 585   1        u16 csize=(size/8+((size%8)?1:0))*(size/2);   //得到字体一个字符对应点阵集所占的字节数             
 586   1        if(chr>' ')chr=chr-' ';//得到偏移后的值
 587   1        else chr=0;//小于空格的一律用空格代替,比如TAB键(键值为9)
 588   1        for(t=0;t<csize;t++)
 589   1        {   
 590   2          switch(size)
 591   2          {
 592   3            case 12:
 593   3              temp=ascii_1206[chr][t];  //调用1206字体
 594   3              break;
 595   3            case 16:
 596   3              temp=ascii_1608[chr][t];    //调用1608字体
 597   3              break;
 598   3            case 24:
 599   3              temp=ascii_2412[chr][t];    //调用2412字体
 600   3              break;
 601   3            default://不支持的字体
 602   3              return;
 603   3          } 
 604   2          tempoff=offset;
 605   2          if(x>xend)return; //超区域了  
 606   2          if(tempoff==0)  //偏移地址到了 
 607   2          {     
 608   3            for(t1=0;t1<8;t1++)
 609   3            {       
 610   4              if(y<=yend)
 611   4              {
 612   5                if(temp&0x80)
C51 COMPILER V9.60.0.0   GUI                                                               06/12/2022 21:53:21 PAGE 11  

 613   5                { 
 614   6                  if(mode==0x02)gui_draw_bigpoint(x,y,color);  
 615   6                  else LCD_DrawFRONT_COLOR(x,y,color);
 616   6                }else if(mode==0)LCD_DrawFRONT_COLOR(x,y,BACK_COLOR); 
 617   5              }
 618   4              temp<<=1;
 619   4              y++;
 620   4              if((y-y0)==size)
 621   4              {
 622   5                y=y0;
 623   5                x++;
 624   5                break;
 625   5              }
 626   4            }
 627   3          }else
 628   2          {
 629   3              y+=8;
 630   3              if((y-y0)>=size)//大于一个字的高度了
 631   3              {
 632   4                y=y0;   //y坐标归零
 633   4                tempoff--;   
 634   4              }
 635   3          }  
 636   2        }                
 637   1      }
 638          
 639          //显示len个数字
 640          //x,y :起点坐标  
 641          //len :数字的位数
 642          //color:颜色
 643          //size:字体大小
 644          //num:数值(0~2^64);
 645          //mode:模式.
 646          //[7]:0,不填充;1,填充0.
 647          //[3:0]:0,非叠加显示;1,叠加显示.2,大点叠加(只适用于叠加模式)
 648          void gui_show_num(u16 x,u16 y,u8 len,u16 color,u8 size,long num,u8 mode)
 649          {           
 650   1        u8 t,temp;
 651   1        u8 enshow=0;               
 652   1        for(t=0;t<len;t++)
 653   1        {
 654   2          temp=(num/gui_pow(10,len-t-1))%10;
 655   2          if(enshow==0&&t<(len-1))
 656   2          {
 657   3            if(temp==0)
 658   3            {
 659   4              if(mode&0X80)gui_show_ptchar(x+(size/2)*t,y,tftlcd_data.width,tftlcd_data.height,0,color,size,'0',mode
             -&0xf);//填充0
 660   4              else gui_show_ptchar(x+(size/2)*t,y,tftlcd_data.width,tftlcd_data.height,0,color,size,' ',mode&0xf);
 661   4              continue;
 662   4            }else enshow=1; 
 663   3             
 664   3          }
 665   2          gui_show_ptchar(x+(size/2)*t,y,tftlcd_data.width,tftlcd_data.height,0,color,size,temp+'0',mode&0xf);
 666   2        }
 667   1      }
 668          
 669          //将数字转为字符串
 670          //str:字符串存放地址.
 671          //num:数字 
 672          u8* gui_num2str(u8*str,u32 num)
 673          {
C51 COMPILER V9.60.0.0   GUI                                                               06/12/2022 21:53:21 PAGE 12  

 674   1        u8 t,temp;
 675   1        u8 enrec=0;              
 676   1        for(t=0;t<10;t++)
 677   1        {
 678   2          temp=(num/gui_pow(10,10-t-1))%10;
 679   2          if(enrec==0&&t<9)
 680   2          {
 681   3            if(temp==0)continue;//还不需要记录
 682   3            else enrec=1;     //需要记录了.
 683   3          }
 684   2          *str=temp+'0';
 685   2          str++;
 686   2        }
 687   1        *str='\0';//加入结束符.
 688   1        return str;
 689   1      }
 690          
 691          //在指定位置开始,显示指定长度范围的字符串.
 692          //x,y:显示开始坐标.
 693          //xend:x方向的终止坐标
 694          //offset:开始显示的偏移
 695          //color:文字颜色.
 696          //size:文字大小
 697          //str:字符串
 698          //mode:0,非叠加显示;1,叠加显示,2,大点叠加(只适用于叠加模式)
 699          void gui_show_ptstr(u16 x,u16 y,u16 xend,u16 yend,u16 offset,u16 color,u8 size,u8 *str,u8 mode)
 700          {
 701   1        u8 bHz=0;       //字符或者中文  
 702   1        u8 EnDisp=0;    //使能显示                                
 703   1          while(*str!=0)  //数据未结束
 704   1          { 
 705   2              if(!bHz)
 706   2              {
 707   3                if(*str>0x80)bHz=1; //中文 
 708   3                else                //字符
 709   3                {          
 710   4              if(EnDisp==0) //还未使能显示
 711   4              {
 712   5                if(offset>=size/2)  //超过了一个字符
 713   5                {
 714   6                  offset-=size/2; //减少一个字符的偏移
 715   6                }else       //未超过一个字符的偏移
 716   5                {
 717   6                  offset=offset%(size/2); //得到字符偏移量
 718   6                  EnDisp=1;       //可以开始显示了
 719   6                }
 720   5              }
 721   4              if(EnDisp==1) //使能显示
 722   4              {
 723   5                gui_show_ptchar(x,y,xend,yend,offset,color,size,*str,mode);//显示一个字符  
 724   5                    if((xend-x)>size/2)x+=size/2; //字符,为全字的一半
 725   5                else x+=xend-x;         //未完全显示
 726   5                if(offset)
 727   5                {
 728   6                  x-=offset;
 729   6                  offset=0;//清除偏移 
 730   6                    } 
 731   5              }
 732   4              if(x>=xend)return;//超过了,退出 
 733   4              str++; 
 734   4                }
 735   3              }else//中文 
C51 COMPILER V9.60.0.0   GUI                                                               06/12/2022 21:53:21 PAGE 13  

 736   2              {     
 737   3                  bHz=0;//有汉字库 
 738   3            if(EnDisp==0)//还未使能
 739   3            {
 740   4              if(offset>=size)//超过了一个字
 741   4              {
 742   5                offset-=size;//减少
 743   5              }else
 744   4              {
 745   5                offset=offset%(size);//得到字符偏移
 746   5                EnDisp=1;//可以开始显示了
 747   5              }
 748   4            }      
 749   3            if(EnDisp)
 750   3            {
 751   4              //gui_show_ptfont(x,y,xend,yend,offset,color,size,str,mode); //显示这个汉字,空心显示   
 752   4              if((xend-x)>size)x+=size; //字符,为全字的一半
 753   4              else x+=xend-x;//未完全显示       
 754   4              if(offset)
 755   4              {
 756   5                x-=offset;
 757   5                offset=0;//清除偏移 
 758   5                  }   
 759   4            }  
 760   3            if(x>=xend)return;//超过了,退出  
 761   3                str+=2;  
 762   3              }            
 763   2          }    
 764   1      }
 765          
 766          //在指定位置开始,显示指定长度范围的字符串.(带边特效显示)
 767          //x,y:显示开始坐标.
 768          //width:最大显示宽度
 769          //offset:开始显示的偏移
 770          //color:文字颜色.
 771          //rimcolor:文字边的颜色
 772          //size:文字大小
 773          //str:字符串
 774          void gui_show_ptstrwhiterim(u16 x,u16 y,u16 xend,u16 yend,u16 offset,u16 color,u16 rimcolor,u8 size,u8 *st
             -r)
 775          {
 776   1        gui_show_ptstr(x,y,xend,yend,offset,rimcolor,size,str,2); //先画边(用大号点画)
 777   1        gui_show_ptstr(x,y,xend,yend,offset,color,size,str,1);    //画字(用小点画)
 778   1      }
 779          
 780          //得到字符串所占的行数
 781          //str:字符串指针;
 782          //linelenth:每行的长度
 783          //font:字体大小
 784          //返回值:字符串所占的行数
 785          u32 gui_get_stringline(u8*str,u16 linelenth,u8 font)
 786          {
 787   1        u16 xpos=0;
 788   1        u32 lincnt=1;//最少就是1行.
 789   1        if(linelenth<font/2)return 0XFFFFFFFF;//无法统计完成
 790   1        while(*str!='\0'&&lincnt!=0xffffffff)
 791   1        {                      
 792   2          if((*str==0x0D&&(*(str+1)==0X0A))||(*str==0X0A))//是回车/换行符
 793   2          { 
 794   3            if(*str==0X0D)str+=2;
 795   3            else str+=1;
 796   3            lincnt++;//行数加1
C51 COMPILER V9.60.0.0   GUI                                                               06/12/2022 21:53:21 PAGE 14  

 797   3            xpos=0;
 798   3          }else if(*str>=0X81&&(*(str+1)>=0X40))//是gbk汉字
 799   2          {
 800   3            xpos+=font;
 801   3            str+=2;
 802   3            if(xpos>linelenth)//已经不在本行之内
 803   3            {
 804   4              xpos=font;
 805   4              lincnt++;//行数加1
 806   4            }
 807   3          }else//是字符
 808   2          {
 809   3            xpos+=font/2;
 810   3            str+=1;
 811   3            if(xpos>linelenth)//已经不在本行之内
 812   3            {
 813   4              xpos=font/2;
 814   4              lincnt++;//行数加1
 815   4            }       
 816   3          } 
 817   2        }
 818   1        return lincnt;
 819   1      }
 820          
 821          //在设定区域内显示字符串,超过区域后不再显示
 822          //str:字符串指针;
 823          //x,y,width,height:显示区域
 824          //font:字体大小
 825          //fcolor:字体颜色,以叠加方式写字.
 826          void gui_show_string(u8*str,u16 x,u16 y,u16 width,u16 height,u8 font,u16 fcolor)
 827          {
 828   1        u16 xpos=x;
 829   1        u16 ypos=y;
 830   1        u16 endx=x+width-1;
 831   1        u16 endy=y+height-1;
 832   1        if(width<font/2)return ;//无法显示完成
 833   1        while(*str!='\0')//未结束
 834   1        {   
 835   2          if((*str==0x0D&&(*(str+1)==0X0A))||(*str==0X0A))//是回车/换行符
 836   2          { 
 837   3            if(*str==0X0D)str+=2;
 838   3            else str+=1;
 839   3            xpos=x;
 840   3            ypos+=font;//y增加16
 841   3          }else if(*str>=0X81&&(*(str+1)>=0X40))//是gbk汉字
 842   2          {
 843   3            if((xpos+font)>(endx+1))//已经不在本行之内
 844   3            {
 845   4              xpos=x;
 846   4              ypos+=font;
 847   4            }
 848   3            //gui_show_ptfont(xpos,ypos,endx,endy,0,fcolor,font,str,1);
 849   3            xpos+=font;//偏移
 850   3            str+=2;
 851   3      
 852   3          }else//是字符
 853   2          {
 854   3            if((xpos+font/2)>(endx+1))
 855   3            {
 856   4              xpos=x;
 857   4              ypos+=font;
 858   4            } 
C51 COMPILER V9.60.0.0   GUI                                                               06/12/2022 21:53:21 PAGE 15  

 859   3            gui_show_ptchar(xpos,ypos,endx,endy,0,fcolor,font,*str,1);       
 860   3            xpos+=font/2;
 861   3            str+=1;       
 862   3          }
 863   2          if(ypos>endy)break;//超过了显示区域了.  
 864   2        }   
 865   1      }
 866          
 867          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  14141    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     592
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
